import {generateRandomBigint, hash, hashBitCount, hashPadded, modPow} from "./utils";
import {bigintToBytes, bytesToBigint, stringToByteArray, wordArrayToBytes} from './transformations'
import {HashFunction, PrimeGroup} from "../components/cryptoTypes";
import {Options} from "../components/options";
import * as CryptoJS from "crypto-js";

export class Routines {

    static randomBytes(length: number): Uint8Array {
        return wordArrayToBytes(CryptoJS.lib.WordArray.random(length));
    }

    static Hash = {
        SHA1: (data: Uint8Array) => {
            let result: any = CryptoJS.SHA1(CryptoJS.lib.WordArray.create(data as any));
            return wordArrayToBytes(result as any);
        },
        SHA256: (data: Uint8Array) => {
            let result: any = CryptoJS.SHA256(CryptoJS.lib.WordArray.create(data as any));
            return wordArrayToBytes(result as any);
        },
        SHA384: (data: Uint8Array) => {
            let result: any = CryptoJS.SHA384(CryptoJS.lib.WordArray.create(data as any));
            return wordArrayToBytes(result as any);
        },
        SHA512: (data: Uint8Array) => {
            let result: any = CryptoJS.SHA512(CryptoJS.lib.WordArray.create(data as any));
            return wordArrayToBytes(result as any);
        },
    };

    static PrimeGroup = {
        256: {
            N: BigInt("125617018995153554710546479714086468244499594888726646874671447258204721048803"),
            g: BigInt(2),
        },
        512: {
            N: BigInt("11144252439149533417835749556168991736939157778924947037200268358613863350040339017097790259154750906072491181606044774215413467851989724116331597513345603"),
            g: BigInt(2),
        },
        768: {
            N: BigInt("1087179135105457859072065649059069760280540086975817629066444682366896187793570736574549981488868217843627094867924800342887096064844227836735667168319981288765377499806385489913341488724152562880918438701129530606139552645689583147"),
            g: BigInt(2),
        },
        1024: {
            N: BigInt("167609434410335061345139523764350090260135525329813904557420930309800865859473551531551523800013916573891864789934747039010546328480848979516637673776605610374669426214776197828492691384519453218253702788022233205683635831626913357154941914129985489522629902540768368409482248290641036967659389658897350067939"),
            g: BigInt(2),
        },
        1536: {
            N: BigInt("1486998185923128292816507353619409521152457662596380074614818966810244974827752411420380336514078832314731499938313197533147998565301020797040787428051479639316928015998415709101293902971072960487527411068082311763171549170528008620813391411445907584912865222076100726050255271567749213905330659264908657221124284665444825474741087704974475795505492821585749417639344967192301749033325359286273431675492866492416941152646940908101472416714421046022696100064262587"),
            g: BigInt(2),
        },
        2048: {
            N: BigInt("21766174458617435773191008891802753781907668374255538511144643224689886235383840957210909013086056401571399717235807266581649606472148410291413364152197364477180887395655483738115072677402235101762521901569820740293149529620419333266262073471054548368736039519702486226506248861060256971802984953561121442680157668000761429988222457090413873973970171927093992114751765168063614761119615476233422096442783117971236371647333871414335895773474667308967050807005509320424799678417036867928316761272274230314067548291133582479583061439577559347101961771406173684378522703483495337037655006751328447510550299250924469288819"),
            g: BigInt(2),
        },
        3072: {
            N: BigInt("0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF"),
            g: BigInt(5)
        },
        4096: {
            N: BigInt("0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A92108011A723C12A787E6D788719A10BDBA5B2699C327186AF4E23C1A946834B6150BDA2583E9CA2AD44CE8DBBBC2DB04DE8EF92E8EFC141FBECAA6287C59474E6BC05D99B2964FA090C3A2233BA186515BE7ED1F612970CEE2D7AFB81BDD762170481CD0069127D5B05AA993B4EA988D8FDDC186FFB7DC90A6C08F4DF435C934063199FFFFFFFFFFFFFFFF"),
            g: BigInt(5)
        },
        6144: {
            N: BigInt("0x
            g: BigInt(5)
        },
        8192: {
            N: BigInt("0x
            g: BigInt(19)
        }
    };

    private readonly hf: HashFunction;
    private readonly pg: PrimeGroup;
    private readonly NBits: number;

    constructor(options?: Options) {
        let opts: any = options || {};

        this.pg = opts.primeGroup || Routines.PrimeGroup[2048];
        this.hf = opts.hf || Routines.Hash.SHA512;
        this.NBits = this.pg.N.toString(2).length;
    }

    /**
     * Hash a collection of byte arrays.
     * @param ab
     */
    hash(...ab: Uint8Array[]): Uint8Array {
        return hash(this.hf, ...ab);
    }

    /**
     * Left pad with zeroes and generates a hash from it.
     * @param ab
     */
    hashPadded(...ab: Uint8Array[]): Uint8Array {
        const targetLength = Math.trunc((this.NBits + 7) / 8);
        return hashPadded(this.hf, targetLength, ...ab);
    }

    /** Computes K. */
    computeK(): bigint {
        return bytesToBigint(
            this.hashPadded(
                bigintToBytes(this.pg.N),
                bigintToBytes(this.pg.g)
            )
        );
    }

    /**
     * Generates a random salt.
     * @param numBytes Length of salt in bytes.
     */
    generateRandomSalt(numBytes?: number): bigint {
        const HBits = hashBitCount(this.hf);
        const saltBytes = numBytes || (2 * HBits) / 8;
        return generateRandomBigint(saltBytes);
    }

    /**
     * Computes X.
     * @param identity
     * @param salt
     * @param password
     */
    computeX(identity: string, salt: bigint, password: string): bigint {
        return bytesToBigint(
            this.hash(
                bigintToBytes(salt),
                this.computeIdentityHash(identity, password),
            )
        );
    }

    /**
     * Computes X that will be used in step 2 from client.
     * @param salt
     * @param identityHash
     */
    computeXStep2(salt: bigint, identityHash: Uint8Array): bigint {
        return bytesToBigint(
            this.hash(
                bigintToBytes(salt),
                identityHash
            )
        );
    }

    /**
     * Generates a hash based on user's identity and password.
     * @param identity
     * @param password
     */
    computeIdentityHash(identity: string, password: string): Uint8Array {
        return this.hash(stringToByteArray(`${identity}:${password}`));
    }

    /**
     * Generates a verifier based on x.
     * @param x
     */
    computeVerifier(x: bigint): bigint {
        return modPow(this.pg.g, x, this.pg.N);
    }

    /**
     * Generates private key ("a" or "b") for the client or server.
     */
    generatePrivateValue(): bigint {
        const numBits = Math.max(256, this.NBits);
        let bi: bigint;

        do {
            bi = generateRandomBigint(numBits / 8) % this.pg.N;
        }
        while (bi === BigInt(0));

        return bi;
    }

    /**
     * Generates client's public key "A".
     * @param a The client's private key "a".
     */
    computeClientPublicValue(a: bigint): bigint {
        return modPow(this.pg.g, a, this.pg.N);
    }

    /**
     * Generates the server's public key "B".
     * @param k The k.
     * @param verifier
     * @param b The server's private key "b".
     */
    computeServerPublicValue(k: bigint, verifier: bigint, b: bigint): bigint {
        return (
            (modPow(this.pg.g, b, this.pg.N) + verifier * k) %
            this.pg.N
        );
    }

    /**
     * Checks if public key is valid.
     * @param value
     */
    isValidPublicValue(value: bigint): boolean {
        return value % this.pg.N !== BigInt(0);
    }

    /**
     * Computes U.
     * @param A The client's public key "A".
     * @param B The server's public key "B".
     */
    computeU(A: bigint, B: bigint): bigint {
        return bytesToBigint(
            this.hashPadded(
                bigintToBytes(A),
                bigintToBytes(B)
            )
        );
    }

    /**
     * Computes client's evidence message "M1".
     * @param identity The user's identity.
     * @param salt The random salt
     * @param A The client's public key "A".
     * @param B The server's public key "B".
     * @param sessionKey The session key "S".
     */
    computeClientEvidence(identity: string, salt: bigint, A: bigint, B: bigint, sessionKey: bigint): bigint {
        return bytesToBigint(
            this.hash(
                stringToByteArray(identity),
                bigintToBytes(salt),
                bigintToBytes(A),
                bigintToBytes(B),
                bigintToBytes(sessionKey)
            )
        );
    }

    /**
     * Computes server's evidence message "M2".
     * @param A The client's public value "A".
     * @param M1 The client's evidence message "M2".
     * @param sessionKey The session key "S".
     */
    computeServerEvidence(A: bigint, M1: bigint, sessionKey: bigint): bigint {
        return bytesToBigint(
            this.hash(bigintToBytes(A),
                bigintToBytes(M1),
                bigintToBytes(sessionKey)
            )
        );
    }

    /**
     * Computes the session key "S" for the client.
     * @param k The k.
     * @param x The x.
     * @param u The u.
     * @param a The client's private key "a".
     * @param B The server's public key "B".
     */
    computeClientSessionKey(k: bigint, x: bigint, u: bigint, a: bigint, B: bigint): bigint {
        const N = this.pg.N;
        const exp = u * x + a;
        const tmp = (modPow(this.pg.g, x, N) * k) % N;

        return modPow(B + N - tmp, exp, N);
    }

    /**
     * Computes the session key "S" for the server.
     * @param verifier The verifier.
     * @param u The U.
     * @param A The client's public key "A".
     * @param b The server's private key "b".
     */
    computeServerSessionKey(verifier: bigint, u: bigint, A: bigint, b: bigint): bigint {
        const N = this.pg.N
        return modPow(modPow(verifier, u, N) * A, b, N);
    }
}